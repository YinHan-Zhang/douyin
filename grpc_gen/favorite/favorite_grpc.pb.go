// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: idl/favorite.proto

package favorite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavoriteManagementClient is the client API for FavoriteManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteManagementClient interface {
	Action(ctx context.Context, in *FavoriteActionRequest, opts ...grpc.CallOption) (*FavoriteActionResponse, error)
	QueryFavorites(ctx context.Context, in *QueryFavoritesRequest, opts ...grpc.CallOption) (*QueryFavoritesResponse, error)
}

type favoriteManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteManagementClient(cc grpc.ClientConnInterface) FavoriteManagementClient {
	return &favoriteManagementClient{cc}
}

func (c *favoriteManagementClient) Action(ctx context.Context, in *FavoriteActionRequest, opts ...grpc.CallOption) (*FavoriteActionResponse, error) {
	out := new(FavoriteActionResponse)
	err := c.cc.Invoke(ctx, "/video.FavoriteManagement/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteManagementClient) QueryFavorites(ctx context.Context, in *QueryFavoritesRequest, opts ...grpc.CallOption) (*QueryFavoritesResponse, error) {
	out := new(QueryFavoritesResponse)
	err := c.cc.Invoke(ctx, "/video.FavoriteManagement/QueryFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteManagementServer is the server API for FavoriteManagement service.
// All implementations must embed UnimplementedFavoriteManagementServer
// for forward compatibility
type FavoriteManagementServer interface {
	Action(context.Context, *FavoriteActionRequest) (*FavoriteActionResponse, error)
	QueryFavorites(context.Context, *QueryFavoritesRequest) (*QueryFavoritesResponse, error)
	mustEmbedUnimplementedFavoriteManagementServer()
}

// UnimplementedFavoriteManagementServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteManagementServer struct {
}

func (UnimplementedFavoriteManagementServer) Action(context.Context, *FavoriteActionRequest) (*FavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedFavoriteManagementServer) QueryFavorites(context.Context, *QueryFavoritesRequest) (*QueryFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFavorites not implemented")
}
func (UnimplementedFavoriteManagementServer) mustEmbedUnimplementedFavoriteManagementServer() {}

// UnsafeFavoriteManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteManagementServer will
// result in compilation errors.
type UnsafeFavoriteManagementServer interface {
	mustEmbedUnimplementedFavoriteManagementServer()
}

func RegisterFavoriteManagementServer(s grpc.ServiceRegistrar, srv FavoriteManagementServer) {
	s.RegisterService(&FavoriteManagement_ServiceDesc, srv)
}

func _FavoriteManagement_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteManagementServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.FavoriteManagement/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteManagementServer).Action(ctx, req.(*FavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteManagement_QueryFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteManagementServer).QueryFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.FavoriteManagement/QueryFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteManagementServer).QueryFavorites(ctx, req.(*QueryFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteManagement_ServiceDesc is the grpc.ServiceDesc for FavoriteManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.FavoriteManagement",
	HandlerType: (*FavoriteManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Action",
			Handler:    _FavoriteManagement_Action_Handler,
		},
		{
			MethodName: "QueryFavorites",
			Handler:    _FavoriteManagement_QueryFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/favorite.proto",
}
