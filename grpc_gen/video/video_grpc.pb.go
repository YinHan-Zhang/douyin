// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: idl/video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoManagementClient is the client API for VideoManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoManagementClient interface {
	CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error)
	QueryVideos(ctx context.Context, in *QueryVideosRequest, opts ...grpc.CallOption) (*QueryVideosResponse, error)
	QueryFeedVideos(ctx context.Context, in *QueryFeedVideosRequest, opts ...grpc.CallOption) (*QueryFeedVideosResponse, error)
	QueryFavoriteVideos(ctx context.Context, in *QueryFavoriteVideosRequest, opts ...grpc.CallOption) (*QueryVideosResponse, error)
}

type videoManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoManagementClient(cc grpc.ClientConnInterface) VideoManagementClient {
	return &videoManagementClient{cc}
}

func (c *videoManagementClient) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error) {
	out := new(CreateVideoResponse)
	err := c.cc.Invoke(ctx, "/video.VideoManagement/CreateVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoManagementClient) QueryVideos(ctx context.Context, in *QueryVideosRequest, opts ...grpc.CallOption) (*QueryVideosResponse, error) {
	out := new(QueryVideosResponse)
	err := c.cc.Invoke(ctx, "/video.VideoManagement/QueryVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoManagementClient) QueryFeedVideos(ctx context.Context, in *QueryFeedVideosRequest, opts ...grpc.CallOption) (*QueryFeedVideosResponse, error) {
	out := new(QueryFeedVideosResponse)
	err := c.cc.Invoke(ctx, "/video.VideoManagement/QueryFeedVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoManagementClient) QueryFavoriteVideos(ctx context.Context, in *QueryFavoriteVideosRequest, opts ...grpc.CallOption) (*QueryVideosResponse, error) {
	out := new(QueryVideosResponse)
	err := c.cc.Invoke(ctx, "/video.VideoManagement/QueryFavoriteVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoManagementServer is the server API for VideoManagement service.
// All implementations must embed UnimplementedVideoManagementServer
// for forward compatibility
type VideoManagementServer interface {
	CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error)
	QueryVideos(context.Context, *QueryVideosRequest) (*QueryVideosResponse, error)
	QueryFeedVideos(context.Context, *QueryFeedVideosRequest) (*QueryFeedVideosResponse, error)
	QueryFavoriteVideos(context.Context, *QueryFavoriteVideosRequest) (*QueryVideosResponse, error)
	mustEmbedUnimplementedVideoManagementServer()
}

// UnimplementedVideoManagementServer must be embedded to have forward compatible implementations.
type UnimplementedVideoManagementServer struct {
}

func (UnimplementedVideoManagementServer) CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedVideoManagementServer) QueryVideos(context.Context, *QueryVideosRequest) (*QueryVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVideos not implemented")
}
func (UnimplementedVideoManagementServer) QueryFeedVideos(context.Context, *QueryFeedVideosRequest) (*QueryFeedVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeedVideos not implemented")
}
func (UnimplementedVideoManagementServer) QueryFavoriteVideos(context.Context, *QueryFavoriteVideosRequest) (*QueryVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFavoriteVideos not implemented")
}
func (UnimplementedVideoManagementServer) mustEmbedUnimplementedVideoManagementServer() {}

// UnsafeVideoManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoManagementServer will
// result in compilation errors.
type UnsafeVideoManagementServer interface {
	mustEmbedUnimplementedVideoManagementServer()
}

func RegisterVideoManagementServer(s grpc.ServiceRegistrar, srv VideoManagementServer) {
	s.RegisterService(&VideoManagement_ServiceDesc, srv)
}

func _VideoManagement_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoManagement/CreateVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).CreateVideo(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoManagement_QueryVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).QueryVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoManagement/QueryVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).QueryVideos(ctx, req.(*QueryVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoManagement_QueryFeedVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).QueryFeedVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoManagement/QueryFeedVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).QueryFeedVideos(ctx, req.(*QueryFeedVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoManagement_QueryFavoriteVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFavoriteVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).QueryFavoriteVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoManagement/QueryFavoriteVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).QueryFavoriteVideos(ctx, req.(*QueryFavoriteVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoManagement_ServiceDesc is the grpc.ServiceDesc for VideoManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoManagement",
	HandlerType: (*VideoManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideo",
			Handler:    _VideoManagement_CreateVideo_Handler,
		},
		{
			MethodName: "QueryVideos",
			Handler:    _VideoManagement_QueryVideos_Handler,
		},
		{
			MethodName: "QueryFeedVideos",
			Handler:    _VideoManagement_QueryFeedVideos_Handler,
		},
		{
			MethodName: "QueryFavoriteVideos",
			Handler:    _VideoManagement_QueryFavoriteVideos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/video.proto",
}
